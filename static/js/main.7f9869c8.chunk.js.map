{"version":3,"sources":["components/Button.jsx","components/ResetStopwatch.jsx","components/ControleStopwatch.jsx","components/DisplayStopwatch.jsx","Stopwatch.jsx","App.jsx","index.js"],"names":["Button","props","className","onClick","disabled","children","ResetStopwatch","setTime","setIsRunning","ControleStopwatch","useState","isRunning","timer","useRef","useEffect","current","setInterval","prevTime","clearInterval","classname","DisplayStopwatch","time","seconds","Math","trunc","mSeconds","Stopwatch","App","minutes","setMinutes","setSeconds","startTimer","useCallback","min","parseInt","sec","setTimeout","clearTimeout","outputMinutes","useMemo","outputSeconds","type","placeholder","value","onChange","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f9869c8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Button(props) {\n  return (\n    <button\n      className={props.className}\n      onClick={props.onClick}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  )\n}\n\nexport default Button;","import React from \"react\";\nimport Button from \"./Button\";\n\nfunction ResetStopwatch({setTime, setIsRunning}) {\n\n  const resetTimer = () => {\n    setIsRunning(false);\n    setTime(0);\n  }\n\n  return (\n    <>\n      <Button\n        className=\"timer__button\"\n        onClick={resetTimer}\n      >\n        Reset\n      </Button>\n    </>\n  )\n}\n\nexport default ResetStopwatch;","import React, {useEffect, useRef, useState} from \"react\";\nimport Button from \"./Button\";\nimport ResetStopwatch from \"./ResetStopwatch\";\n\nfunction ControleStopwatch({setTime}) {\n\n  const [isRunning, setIsRunning] = useState(false);\n\n  const startCount = () => setIsRunning(true)\n  const pauseCount = () => setIsRunning(false)\n\n  const timer = useRef(null)\n\n  useEffect(() => {\n    if (isRunning) {\n      timer.current = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 100);\n    }\n    return () => clearInterval(timer.current)\n  }, [isRunning]);\n\n  return (\n    <>\n      <Button\n        classname=\"timer__button\"\n        onClick={startCount}\n        disabled={isRunning}\n      >\n        Start\n      </Button>\n      <Button\n        classname=\"timer__button\"\n        onClick={pauseCount}\n      >\n        Pause\n      </Button>\n      <ResetStopwatch\n        setTime={setTime}\n        setIsRunning={setIsRunning}\n      />\n    </>\n  );\n}\n\nexport default ControleStopwatch;","import React from \"react\";\n\nfunction DisplayStopwatch({time}) {\n\n  const seconds = Math.trunc(time / 10)\n  const mSeconds = time % 10;\n\n  return (\n    <p className=\"display\"> {seconds}.{mSeconds}s </p>\n  )\n}\n\nexport default DisplayStopwatch;","import React, {useState} from \"react\";\nimport ControleStopwatch from \"./components/ControleStopwatch\";\nimport DisplayStopwatch from \"./components/DisplayStopwatch\";\n\nfunction Stopwatch() {\n\n  const [time, setTime] = useState(0);\n\n  return (\n    <div className=\"stopwatch\">\n      <DisplayStopwatch\n        time={time}\n      />\n      <ControleStopwatch\n        setTime={setTime}\n      />\n    </div>\n  )\n}\n\nexport default Stopwatch;","import React, {useState, useEffect, useMemo, useCallback} from \"react\";\nimport \"./index.css\"\nimport Button from \"./components/Button\";\nimport Stopwatch from \"./Stopwatch\";\n\nfunction App() {\n\n  const [minutes, setMinutes] = useState('');\n  const [seconds, setSeconds] = useState('');\n  const [time, setTime] = useState(0);\n\n  const getSeconds = (e) => {\n    if (\n      e.target.value >= 0 &&\n      e.target.value < 60\n    ) {\n      return setSeconds(e.target.value);\n    }\n  }\n\n  const getMinutes = (e) => {\n    if (e.target.value >= 0) {\n      return setMinutes(e.target.value);\n    }\n  }\n\n  const startTimer = useCallback(() => {\n    if (!minutes && !seconds) {\n      return;\n    }\n    let min = minutes === '' ? 0 : parseInt(minutes);\n    let sec = seconds === '' ? 0 : parseInt(seconds);\n    setTime(min * 60 + sec);\n    setMinutes('');\n    setSeconds('');\n  }, [seconds, minutes]);\n\n  useEffect(() => {\n    let timer;\n    timer = time > 0 && setTimeout(() => setTime(time - 1), 1000);\n    return () => clearTimeout(timer);\n  }, [time]);\n\n  const outputMinutes = useMemo(() => {\n    const min = Math.trunc(time / 60);\n    return min < 10 ? '0' + min : min;\n  }, [time]);\n\n  const outputSeconds = useMemo(() => {\n    const sec = time % 60;\n    return sec < 10 ? '0' + sec : sec;\n  }, [time]);\n\n  const resetTimer = () => {\n    setTime(0);\n    setMinutes('');\n    setSeconds('');\n  }\n\n  return (\n    <div>\n      <div className=\"timer\">\n        <p className=\"display\"> {outputMinutes} : {outputSeconds} </p>\n        <p> Enter the time: </p>\n        <input\n          className=\"timer__input\"\n          type=\"number\"\n          placeholder=\"mm\"\n          value={minutes}\n          onChange={getMinutes}\n        />\n        <input\n          className=\"timer__input\"\n          type=\"number\"\n          placeholder=\"ss\"\n          value={seconds}\n          onChange={getSeconds}\n        />\n        <Button\n          className=\"timer__button\"\n          onClick={startTimer}\n          disabled={time > 0}\n        >\n          Start\n        </Button>\n        <Button\n          className=\"timer__button\"\n          onClick={resetTimer}\n        >\n          Reset\n        </Button>\n      </div>\n      <Stopwatch/>\n    </div>\n  )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}